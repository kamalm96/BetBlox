// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO users (email, username, password_hash)
VALUES ($1, $2, $3)
RETURNING id, email, username, created_at
`

type CreateAccountParams struct {
	Email        string         `json:"email"`
	Username     sql.NullString `json:"username"`
	PasswordHash string         `json:"password_hash"`
}

type CreateAccountRow struct {
	ID        int64          `json:"id"`
	Email     string         `json:"email"`
	Username  sql.NullString `json:"username"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (CreateAccountRow, error) {
	row := q.db.QueryRowContext(ctx, createAccount, arg.Email, arg.Username, arg.PasswordHash)
	var i CreateAccountRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Username,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id=$1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT email, username, created_at, is_verified FROM users
WHERE id = $1 LIMIT 1
`

type GetUserRow struct {
	Email      string         `json:"email"`
	Username   sql.NullString `json:"username"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	IsVerified sql.NullBool   `json:"is_verified"`
}

func (q *Queries) GetUser(ctx context.Context, id int64) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.Email,
		&i.Username,
		&i.CreatedAt,
		&i.IsVerified,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT email, username, created_at, is_verified FROM users
ORDER BY id
LIMIT $1
OFFSET $2
`

type GetUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetUsersRow struct {
	Email      string         `json:"email"`
	Username   sql.NullString `json:"username"`
	CreatedAt  sql.NullTime   `json:"created_at"`
	IsVerified sql.NullBool   `json:"is_verified"`
}

func (q *Queries) GetUsers(ctx context.Context, arg GetUsersParams) ([]GetUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUsersRow{}
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.Email,
			&i.Username,
			&i.CreatedAt,
			&i.IsVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET password_hash = $1
WHERE email = $2
`

type UpdateUserPasswordParams struct {
	PasswordHash string `json:"password_hash"`
	Email        string `json:"email"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.PasswordHash, arg.Email)
	return err
}
