// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: trade.sql

package db

import (
	"context"
	"database/sql"
)

const createTrade = `-- name: CreateTrade :one
INSERT INTO trades (buy_order_id, sell_order_id, contract_id, price_cents, quantity)
VALUES ($1,$2,$3,$4,$5)
RETURNING id, buy_order_id, sell_order_id, contract_id, price_cents, quantity, executed_at
`

type CreateTradeParams struct {
	BuyOrderID  sql.NullInt64 `json:"buy_order_id"`
	SellOrderID sql.NullInt64 `json:"sell_order_id"`
	ContractID  sql.NullInt64 `json:"contract_id"`
	PriceCents  sql.NullInt32 `json:"price_cents"`
	Quantity    sql.NullInt32 `json:"quantity"`
}

func (q *Queries) CreateTrade(ctx context.Context, arg CreateTradeParams) (Trade, error) {
	row := q.db.QueryRowContext(ctx, createTrade,
		arg.BuyOrderID,
		arg.SellOrderID,
		arg.ContractID,
		arg.PriceCents,
		arg.Quantity,
	)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.BuyOrderID,
		&i.SellOrderID,
		&i.ContractID,
		&i.PriceCents,
		&i.Quantity,
		&i.ExecutedAt,
	)
	return i, err
}

const deleteTrade = `-- name: DeleteTrade :exec
DELETE FROM trades WHERE id = $1
`

func (q *Queries) DeleteTrade(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTrade, id)
	return err
}

const getTrade = `-- name: GetTrade :one
SELECT id, buy_order_id, sell_order_id, contract_id, price_cents, quantity, executed_at FROM trades
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTrade(ctx context.Context, id int64) (Trade, error) {
	row := q.db.QueryRowContext(ctx, getTrade, id)
	var i Trade
	err := row.Scan(
		&i.ID,
		&i.BuyOrderID,
		&i.SellOrderID,
		&i.ContractID,
		&i.PriceCents,
		&i.Quantity,
		&i.ExecutedAt,
	)
	return i, err
}

const listTrades = `-- name: ListTrades :many
SELECT id, buy_order_id, sell_order_id, contract_id, price_cents, quantity, executed_at FROM trades
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTradesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTrades(ctx context.Context, arg ListTradesParams) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, listTrades, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Trade{}
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.ID,
			&i.BuyOrderID,
			&i.SellOrderID,
			&i.ContractID,
			&i.PriceCents,
			&i.Quantity,
			&i.ExecutedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
