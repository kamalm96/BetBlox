// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order.sql

package db

import (
	"context"
	"database/sql"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders
(user_id, contract_id, order_type, order_style, price_cents, quantity) VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, contract_id, order_type, order_style, price_cents, quantity, status, created_at
`

type CreateOrderParams struct {
	UserID     sql.NullInt64  `json:"user_id"`
	ContractID sql.NullInt64  `json:"contract_id"`
	OrderType  sql.NullString `json:"order_type"`
	OrderStyle sql.NullString `json:"order_style"`
	PriceCents sql.NullInt32  `json:"price_cents"`
	Quantity   sql.NullInt32  `json:"quantity"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.UserID,
		arg.ContractID,
		arg.OrderType,
		arg.OrderStyle,
		arg.PriceCents,
		arg.Quantity,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ContractID,
		&i.OrderType,
		&i.OrderStyle,
		&i.PriceCents,
		&i.Quantity,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: DeleteOrder :exec
DELETE FROM orders WHERE id = $1
`

func (q *Queries) DeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, contract_id, order_type, order_style, price_cents, quantity, status, created_at FROM orders
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ContractID,
		&i.OrderType,
		&i.OrderStyle,
		&i.PriceCents,
		&i.Quantity,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, user_id, contract_id, order_type, order_style, price_cents, quantity, status, created_at FROM orders
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ContractID,
			&i.OrderType,
			&i.OrderStyle,
			&i.PriceCents,
			&i.Quantity,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = $1
WHERE id = $2
`

type UpdateOrderStatusParams struct {
	Status sql.NullString `json:"status"`
	ID     int64          `json:"id"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.Status, arg.ID)
	return err
}
