// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: transaction.sql

package db

import (
	"context"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (id, user_id, type, amount_cents, balance_after)
VALUES ($1,$2,$3,$4,$5)
RETURNING id, user_id, type, amount_cents, balance_after, created_at, reference_id
`

type CreateTransactionParams struct {
	ID           int64  `json:"id"`
	UserID       int64  `json:"user_id"`
	Type         string `json:"type"`
	AmountCents  int64  `json:"amount_cents"`
	BalanceAfter int64  `json:"balance_after"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.UserID,
		arg.Type,
		arg.AmountCents,
		arg.BalanceAfter,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.AmountCents,
		&i.BalanceAfter,
		&i.CreatedAt,
		&i.ReferenceID,
	)
	return i, err
}

const getAllTransactions = `-- name: GetAllTransactions :many
SELECT id, user_id, type, amount_cents, balance_after, created_at, reference_id FROM transactions
order by id
LIMIT $1
OFFSET $2
`

type GetAllTransactionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllTransactions(ctx context.Context, arg GetAllTransactionsParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllTransactions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Transaction{}
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.AmountCents,
			&i.BalanceAfter,
			&i.CreatedAt,
			&i.ReferenceID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionById = `-- name: GetTransactionById :one
SELECT id, user_id, type, amount_cents, balance_after, created_at, reference_id FROM transactions
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetTransactionById(ctx context.Context, id int64) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionById, id)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.AmountCents,
		&i.BalanceAfter,
		&i.CreatedAt,
		&i.ReferenceID,
	)
	return i, err
}
