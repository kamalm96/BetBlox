// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: contract.sql

package db

import (
	"context"
)

const createContract = `-- name: CreateContract :one
INSERT INTO contracts (contract_type, price_cents)
VALUES ($1 , $2)
RETURNING id, market_id, contract_type, price_cents, volume
`

type CreateContractParams struct {
	ContractType string `json:"contract_type"`
	PriceCents   int32  `json:"price_cents"`
}

func (q *Queries) CreateContract(ctx context.Context, arg CreateContractParams) (Contract, error) {
	row := q.db.QueryRowContext(ctx, createContract, arg.ContractType, arg.PriceCents)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.MarketID,
		&i.ContractType,
		&i.PriceCents,
		&i.Volume,
	)
	return i, err
}

const deleteContract = `-- name: DeleteContract :exec
DELETE FROM contracts where id = $1
`

func (q *Queries) DeleteContract(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteContract, id)
	return err
}

const getContract = `-- name: GetContract :one
SELECT id, market_id, contract_type, price_cents, volume FROM contracts
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetContract(ctx context.Context, id int64) (Contract, error) {
	row := q.db.QueryRowContext(ctx, getContract, id)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.MarketID,
		&i.ContractType,
		&i.PriceCents,
		&i.Volume,
	)
	return i, err
}

const listContracts = `-- name: ListContracts :many
SELECT id, market_id, contract_type, price_cents, volume FROM contracts
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListContractsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListContracts(ctx context.Context, arg ListContractsParams) ([]Contract, error) {
	rows, err := q.db.QueryContext(ctx, listContracts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Contract{}
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.MarketID,
			&i.ContractType,
			&i.PriceCents,
			&i.Volume,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
