// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: market_resolution.sql

package db

import (
	"context"
	"time"
)

const getResolution = `-- name: GetResolution :one
SELECT market_id, outcome, resolved_by, resolved_at FROM market_resolution
WHERE market_id = $1
LIMIT 1
`

func (q *Queries) GetResolution(ctx context.Context, marketID int64) (MarketResolution, error) {
	row := q.db.QueryRowContext(ctx, getResolution, marketID)
	var i MarketResolution
	err := row.Scan(
		&i.MarketID,
		&i.Outcome,
		&i.ResolvedBy,
		&i.ResolvedAt,
	)
	return i, err
}

const isMarketResolved = `-- name: IsMarketResolved :one
SELECT EXISTS (
    SELECT 1 FROM market_resolution WHERE market_id = $1
) AS is_resolved
`

func (q *Queries) IsMarketResolved(ctx context.Context, marketID int64) (bool, error) {
	row := q.db.QueryRowContext(ctx, isMarketResolved, marketID)
	var is_resolved bool
	err := row.Scan(&is_resolved)
	return is_resolved, err
}

const listResolutions = `-- name: ListResolutions :many
SELECT market_id, outcome, resolved_by, resolved_at FROM market_resolution
ORDER BY market_id
LIMIT $1
OFFSET $2
`

type ListResolutionsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListResolutions(ctx context.Context, arg ListResolutionsParams) ([]MarketResolution, error) {
	rows, err := q.db.QueryContext(ctx, listResolutions, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []MarketResolution{}
	for rows.Next() {
		var i MarketResolution
		if err := rows.Scan(
			&i.MarketID,
			&i.Outcome,
			&i.ResolvedBy,
			&i.ResolvedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markAsResolved = `-- name: MarkAsResolved :one
INSERT INTO market_resolution (market_id, outcome, resolved_by)
VALUES ($1, $2, $3)
RETURNING market_id, outcome, resolved_by, resolved_at
`

type MarkAsResolvedParams struct {
	MarketID   int64  `json:"market_id"`
	Outcome    string `json:"outcome"`
	ResolvedBy int64  `json:"resolved_by"`
}

func (q *Queries) MarkAsResolved(ctx context.Context, arg MarkAsResolvedParams) (MarketResolution, error) {
	row := q.db.QueryRowContext(ctx, markAsResolved, arg.MarketID, arg.Outcome, arg.ResolvedBy)
	var i MarketResolution
	err := row.Scan(
		&i.MarketID,
		&i.Outcome,
		&i.ResolvedBy,
		&i.ResolvedAt,
	)
	return i, err
}

const updateResolution = `-- name: UpdateResolution :one
UPDATE market_resolution
SET outcome = $1,
    resolved_at = $2,
    resolved_by = NOW()
WHERE market_id = $3
RETURNING market_id, outcome, resolved_by, resolved_at
`

type UpdateResolutionParams struct {
	Outcome    string    `json:"outcome"`
	ResolvedAt time.Time `json:"resolved_at"`
	MarketID   int64     `json:"market_id"`
}

func (q *Queries) UpdateResolution(ctx context.Context, arg UpdateResolutionParams) (MarketResolution, error) {
	row := q.db.QueryRowContext(ctx, updateResolution, arg.Outcome, arg.ResolvedAt, arg.MarketID)
	var i MarketResolution
	err := row.Scan(
		&i.MarketID,
		&i.Outcome,
		&i.ResolvedBy,
		&i.ResolvedAt,
	)
	return i, err
}
