// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: market.sql

package db

import (
	"context"
	"time"
)

const createMarket = `-- name: CreateMarket :one
INSERT INTO markets
(title, description, category, status, closes_at, resolves_at)
VALUES ( $1, $2, $3, $4, $5, $6)
RETURNING id, title, description, category, status, created_at, closes_at, resolves_at
`

type CreateMarketParams struct {
	Title       string    `json:"title"`
	Description string    `json:"description"`
	Category    string    `json:"category"`
	Status      string    `json:"status"`
	ClosesAt    time.Time `json:"closes_at"`
	ResolvesAt  time.Time `json:"resolves_at"`
}

func (q *Queries) CreateMarket(ctx context.Context, arg CreateMarketParams) (Market, error) {
	row := q.db.QueryRowContext(ctx, createMarket,
		arg.Title,
		arg.Description,
		arg.Category,
		arg.Status,
		arg.ClosesAt,
		arg.ResolvesAt,
	)
	var i Market
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Category,
		&i.Status,
		&i.CreatedAt,
		&i.ClosesAt,
		&i.ResolvesAt,
	)
	return i, err
}

const deleteMarket = `-- name: DeleteMarket :exec
DELETE FROM markets WHERE id = $1
`

func (q *Queries) DeleteMarket(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMarket, id)
	return err
}

const getMarket = `-- name: GetMarket :one
SELECT id, title, description, category, status, created_at, closes_at, resolves_at FROM markets
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetMarket(ctx context.Context, id int64) (Market, error) {
	row := q.db.QueryRowContext(ctx, getMarket, id)
	var i Market
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Category,
		&i.Status,
		&i.CreatedAt,
		&i.ClosesAt,
		&i.ResolvesAt,
	)
	return i, err
}

const listAllMarkets = `-- name: ListAllMarkets :many
SELECT id, title, description, category, status, created_at, closes_at, resolves_at FROM markets
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAllMarketsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListAllMarkets(ctx context.Context, arg ListAllMarketsParams) ([]Market, error) {
	rows, err := q.db.QueryContext(ctx, listAllMarkets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Market{}
	for rows.Next() {
		var i Market
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Category,
			&i.Status,
			&i.CreatedAt,
			&i.ClosesAt,
			&i.ResolvesAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOpenMarkets = `-- name: ListOpenMarkets :many
SELECT id, title, description, category, status, created_at, closes_at, resolves_at FROM markets
WHERE status = 'open'
LIMIT $1
OFFSET $2
`

type ListOpenMarketsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOpenMarkets(ctx context.Context, arg ListOpenMarketsParams) ([]Market, error) {
	rows, err := q.db.QueryContext(ctx, listOpenMarkets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Market{}
	for rows.Next() {
		var i Market
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Category,
			&i.Status,
			&i.CreatedAt,
			&i.ClosesAt,
			&i.ResolvesAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const resolveMarket = `-- name: ResolveMarket :exec
UPDATE markets
set status = $1
WHERE id = $2
`

type ResolveMarketParams struct {
	Status string `json:"status"`
	ID     int64  `json:"id"`
}

func (q *Queries) ResolveMarket(ctx context.Context, arg ResolveMarketParams) error {
	_, err := q.db.ExecContext(ctx, resolveMarket, arg.Status, arg.ID)
	return err
}
